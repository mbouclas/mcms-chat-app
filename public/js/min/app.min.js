/*
 * Basically this is just a bootloader. We're adding all the modules in here
 * No controllers of logic should reside in here
 */
var baseTemplateUrl = '/partials/';
(function() {
    'use strict';
    var baseUrl = '/api/';
    var extraModules = [];

    var angularModules = ['ngRoute','ngSanitize','btford.socket-io'];
    angularModules = angular.extend(angularModules,extraModules);

    angular.module('mcms', angularModules)
        .service('lodash', lodash)
        .service('slugifyService', slugifyService)
        .service('moment', momentService)
        .config(config);

    config.$inject = ['$routeProvider','$locationProvider','$httpProvider'];
    function config($routeProvider,$locationProvider,$httpProvider) {
        $routeProvider
            .when('/', {
                templateUrl: baseTemplateUrl + 'index.html',
                controller: 'mainCtrl',
                controllerAs: 'Main'
            });
    }


})();
(function() {
    'use strict';

    angular.module('mcms')
        .factory('Socket', Socket);

    Socket.$inject = ['socketFactory'];

    function Socket(socketFactory) {
        //var Socket = io.connect();
        var Socket = io('http://localhost:3030/server-ui');
        var mySocket = socketFactory({
            ioSocket: Socket
        });

        return mySocket;
    }
})();
function lodash(){
    return window._;
}

function momentService(){
    return window.moment;
}

function slugifyService(){
    return window.slug;
}

logger.$inject = ['$log'];

function logger($log) {
    var service = {
        info : info,
        error : error,
        success : success,
        warning : warning
    };

    return service;

    function info(message,data){
        $log.info('Info : ' + message,data);
    }

    function error(message,data){
        $log.error('Info : ' + message,data);
    }

    function success(message,data){
        $log.success('Info : ' + message,data);
    }

    function warning(message,data){
        $log.warning('Info : ' + message,data);
    }
}

pageTitle.$inject = ['$rootScope','$timeout'];
QS.$inject = ['$location','lodash'];

function pageTitle($rootScope,$timeout){
    var service = {
        title : '',
        set : function(title){
            this.title = title;
            //wait for the DOM basically
            $timeout(function(){
                 $rootScope.$broadcast('set.pageTitle',title);
            });

        },
        get : function() {
            return this.title;
        }
    };

    return service;
}

function QS($location,lodash){

    return {
        setupFiltersFromQueryString : function(filters){
            var params = $location.search();
            lodash.each(params,function(value,key){
                if (typeof filters[key] != 'undefined'){
                    filters[key].value = value;
                }
            });

            return filters;
        },
        setupQueryString : function(filters,include) {
            var params = {},
                QS = $location.search(),
                Query = {};

            for (var a in filters){
                if (filters[a].value){
                    Query[a] = filters[a].value;
                }
            }

            if (include) {
                Query = lodash.merge(include,Query);
            }

            $location.search(Query);
            return Query;
        }
    };
}
(function() {
    'use strict';
    angular.module('mcms')
        .service('baseXhr',baseXhr);

    baseXhr.$inject = ['$http', '$q', '$rootScope'];

    function baseXhr($http, $q, $rootScope) {
        var baseUrl = '/api/clients/';
        var service = {
            getClients: getClients,
            getClient: getClient,
            updateClients: updateClients,
            saveClient: saveClient
        };

        return service;

        function post(url, options) {
            var defer = $q.defer();
            var params = (typeof options != 'undefined') ? angular.copy(options) : {};
            params = angular.extend(params, {_csrf: $rootScope.CSRF});

            $rootScope.loading = true;
            $http.post(url, params).
                success(function (data, status) {
                    defer.resolve(data);
                    $rootScope.loading = false;
                });
            return defer.promise;
        }

        function getClients(options) {

            return post(baseUrl + 'find', options);
        }

        function getClient(options) {
            return post(baseUrl + 'findOne', options);
        }

        function updateClients(options) {
            return post(baseUrl + 'update', options);
        }

        function saveClient(options) {
            return post(baseUrl + 'updateOne', options);
        }
    }
})();
(function() {
    'use strict';

    angular.module('mcms')
        .directive('startPrivateChat', startPrivateChat);

    startPrivateChat.$inject = ['$rootScope','$compile','$templateCache'];

    function startPrivateChat($rootScope,$compile,$templateCache) {

        var directive = {
            restrict: 'A',
            templateUrl: baseTemplateUrl + 'startPrivateChat.directive.html',
            link: linkFunc,
            controller: startPrivateChatCtrl,
            controllerAs: 'Chat'
        };

        return directive;

        function linkFunc(scope, el, attr, ctrl) {
            scope.started = false;

            el.bind("click", function(){
                if (!scope.started){
                    angular.element(document.getElementById('space-for-chats')).
                        append($compile($templateCache.get(baseTemplateUrl + 'startPrivateChat.directive.html')[1])(scope));
                    scope.started = true;
                }

            });
        }

    }

    function startPrivateChatCtrl(){

    }

})();
(function() {
    'use strict';
    angular
        .module('mcms')
        .controller('mainCtrl', mainCtrl);

    mainCtrl.$inject = ['Socket','$timeout','lodash'];
    function mainCtrl(Socket,$timeout,lodash){
        var vm = this;
        vm.user = {};
        vm.connectedUsers = [];
        vm.messages = [];
        vm.message = '';

        Socket.on('connect',function(){
            console.log('Connected to Server');
        });

        Socket.on('names',function(users){
            console.log(users);
           vm.connectedUsers = users;
        });


        Socket.on('newUser',function(user){
            console.log('new user subscribed',user);
            if (user.id == null){
                return;//show an error
            }

            vm.user = user;
            vm.connectedUsers.push(user);

        });

        Socket.on('newMessage', function (message) {
            vm.messages.push(message);
            console.log(message);
        });

        vm.chooseNickName = function(){
            console.log('Sending new nick ' + vm.nick);
            Socket.emit('chooseNickname',vm.nick);
        };

        vm.sendPublicMessage = function () {
            console.log('sending',vm.message);
            Socket.emit('newMessage',vm.message);
            vm.message = '';
        };
    }
})();